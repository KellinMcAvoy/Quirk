// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import sql "database/sql"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Exec provides a mock function with given fields: _a0, args
func (_m *Store) Exec(_a0 string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(_a0, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(_a0, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: out, _a1, args
func (_m *Store) Read(out interface{}, _a1 string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, out, _a1)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(out, _a1, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadOne provides a mock function with given fields: out, _a1, args
func (_m *Store) ReadOne(out interface{}, _a1 string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, out, _a1)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(out, _a1, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: _a0, args
func (_m *Store) Write(_a0 string, args interface{}) error {
	ret := _m.Called(_a0, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
