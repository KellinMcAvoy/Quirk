// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/mcavoyk/quirk/api/models"
import sql "database/sql"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeletePost provides a mock function with given fields: id
func (_m *Store) DeletePost(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *Store) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: _a0, args
func (_m *Store) Exec(_a0 string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(_a0, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(_a0, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: id
func (_m *Store) GetPost(id string) (*models.PostInfo, error) {
	ret := _m.Called(id)

	var r0 *models.PostInfo
	if rf, ok := ret.Get(0).(func(string) *models.PostInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByUser provides a mock function with given fields: id, user
func (_m *Store) GetPostByUser(id string, user string) (*models.PostInfo, error) {
	ret := _m.Called(id, user)

	var r0 *models.PostInfo
	if rf, ok := ret.Get(0).(func(string, string) *models.PostInfo); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: id
func (_m *Store) GetSession(id string) (*models.Session, error) {
	ret := _m.Called(id)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(string) *models.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *Store) GetUser(id string) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByName provides a mock function with given fields: username
func (_m *Store) GetUserByName(username string) (*models.User, error) {
	ret := _m.Called(username)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBySession provides a mock function with given fields: sessionID
func (_m *Store) GetUserBySession(sessionID string) (*models.User, error) {
	ret := _m.Called(sessionID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPost provides a mock function with given fields: post
func (_m *Store) InsertPost(post *models.Post) (*models.PostInfo, error) {
	ret := _m.Called(post)

	var r0 *models.PostInfo
	if rf, ok := ret.Get(0).(func(*models.Post) *models.PostInfo); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSession provides a mock function with given fields: session
func (_m *Store) InsertSession(session *models.Session) (*models.Session, error) {
	ret := _m.Called(session)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(*models.Session) *models.Session); ok {
		r0 = rf(session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Session) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: user
func (_m *Store) InsertUser(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertVote provides a mock function with given fields: vote
func (_m *Store) InsertVote(vote *models.Vote) error {
	ret := _m.Called(vote)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Vote) error); ok {
		r0 = rf(vote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostsByDistance provides a mock function with given fields: lat, lon, userID, page, pageSize
func (_m *Store) PostsByDistance(lat float64, lon float64, userID string, page int, pageSize int) ([]models.PostInfo, error) {
	ret := _m.Called(lat, lon, userID, page, pageSize)

	var r0 []models.PostInfo
	if rf, ok := ret.Get(0).(func(float64, float64, string, int, int) []models.PostInfo); ok {
		r0 = rf(lat, lon, userID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PostInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64, string, int, int) error); ok {
		r1 = rf(lat, lon, userID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostsByParent provides a mock function with given fields: parent, user, page, pageSize
func (_m *Store) PostsByParent(parent string, user string, page int, pageSize int) ([]models.PostInfo, error) {
	ret := _m.Called(parent, user, page, pageSize)

	var r0 []models.PostInfo
	if rf, ok := ret.Get(0).(func(string, string, int, int) []models.PostInfo); ok {
		r0 = rf(parent, user, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PostInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(parent, user, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: out, _a1, args
func (_m *Store) Read(out interface{}, _a1 string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, out, _a1)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(out, _a1, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: post, user
func (_m *Store) UpdatePost(post *models.Post, user string) (*models.PostInfo, error) {
	ret := _m.Called(post, user)

	var r0 *models.PostInfo
	if rf, ok := ret.Get(0).(func(*models.Post, string) *models.PostInfo); ok {
		r0 = rf(post, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Post, string) error); ok {
		r1 = rf(post, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSession provides a mock function with given fields: session
func (_m *Store) UpdateSession(session *models.Session) {
	_m.Called(session)
}

// UpdateUser provides a mock function with given fields: user
func (_m *Store) UpdateUser(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: _a0, args
func (_m *Store) Write(_a0 string, args interface{}) error {
	ret := _m.Called(_a0, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
